[{"categories":null,"contents":"Introduction In this post, we\u0026rsquo;ll walk you through setting up a WebAssembly Micro Cloud using Puppet for infrastructure management and Docker Swarm for orchestration. This project leverages the TuringPi 2 board with Compute Module 4 and RK1 Module to create a scalable and robust cloud environment.\nPrerequisites Linux-based OS: While other OS can be used, this guide focuses on a Linux environment for setup and management. SSH Access: Ensure SSH access to your nodes. Static IP Addresses: Configure static IP addresses or hostname for your nodes. Puppet Installed: Puppet must be installed on your Linux machine for managing the nodes. Infrastructure Overview Puppet Master (Manager): Manages the entire infrastructure. Docker Swarm Masters: Nodes that serve as Docker Swarm managers. Docker Swarm Workers: Nodes that serve as Docker Swarm workers. Diagram Step 0: Setting Up SSH Access First, generate an SSH key pair on your Linux machine if you haven\u0026rsquo;t already:\nssh-keygen -t rsa -b 4096 -C \u0026#34;www.something@example.com\u0026#34; Copy the public key to each of your nodes:\nssh-copy-id user@hostname Step 1: Setting Up Puppet Master Create a script to install the Puppet agent on each node and configure it to communicate with the Puppet server:\nClick to expand #!/bin/bash if command -v /opt/puppetlabs/server/bin/puppetserver \u0026amp;\u0026gt; /dev/null; then PUPPET_VERSION=$(/opt/puppetlabs/server/bin/puppetserver --version) echo \u0026#34;Puppet Server is already installed. Version: $PUPPET_VERSION\u0026#34; exit 0 fi sudo apt-get update sudo apt-get upgrade -y sudo apt-get install openjdk-11-jdk -y wget https://apt.puppet.com/puppet8-release-bullseye.deb sudo dpkg -i puppet8-release-bullseye.deb sudo apt-get update sudo apt-get install puppetserver -y # Depending on a device we want to install Puppet Server we can do a memory allocation by set up the max mem to 1GB (default is 2gb) # sudo sed -i \u0026#39;s/-Xms2g -Xmx2g/-Xms1g -Xmx1g/\u0026#39; /etc/default/puppetserver sudo systemctl start puppetserver sudo systemctl enable puppetserver rm puppet8-release-bullseye.deb if systemctl is-active --quiet puppetserver; then PUPPET_VERSION=$(/opt/puppetlabs/server/bin/puppetserver --version) echo \u0026#34;Puppet Server is installed and running. Version: $PUPPET_VERSION\u0026#34; else echo \u0026#34;Puppet Server installation failed or the service is not running.\u0026#34; fi First, we set up the Puppet Master which will manage the configuration of all nodes. The Puppet Master ensures that all\nnodes are correctly configured and that their states are maintained programmatically.\nStep 2: Installing Puppet Agent on Nodes Create a script to install the Puppet agent on each node and configure it to communicate with the Puppet server:\nClick to expand #!/bin/bash if [ \u0026#34;$#\u0026#34; -lt 2 ]; then echo \u0026#34;Usage: $0 \u0026lt;username\u0026gt; \u0026lt;hostname\u0026gt;\u0026#34; exit 1 fi USER=$1 HOSTNAME=$2 PUPPET_SERVER_HOSTNAME=\u0026#34;puppet\u0026#34; PUPPET_SERVER_IP=\u0026#34;192.168.0.10\u0026#34; if ssh -o BatchMode=yes ${USER}@${HOSTNAME} \u0026#34;command -v /opt/puppetlabs/bin/puppet \u0026amp;\u0026gt; /dev/null\u0026#34;; then PUPPET_VERSION=$(ssh -o BatchMode=yes ${USER}@${HOSTNAME} \u0026#34;/opt/puppetlabs/bin/puppet --version\u0026#34;) echo \u0026#34;Puppet Agent is already installed on ${HOSTNAME}. Version: $PUPPET_VERSION\u0026#34; exit 0 fi ssh -o BatchMode=yes ${USER}@${HOSTNAME} \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; wget https://apt.puppet.com/puppet8-release-focal.deb sudo dpkg -i puppet8-release-focal.deb sudo apt-get update sudo apt-get install puppet-agent -y rm puppet8-release-focal.deb EOF ssh -o BatchMode=yes ${USER}@${HOSTNAME} \u0026#34;echo \u0026#39;${PUPPET_SERVER_IP} ${PUPPET_SERVER_HOSTNAME}\u0026#39; | sudo tee -a /etc/hosts\u0026#34; # Configure Puppet Agent to communicate with the Puppet Server ssh -o BatchMode=yes ${USER}@${HOSTNAME} \u0026lt;\u0026lt; EOF sudo tee /etc/puppetlabs/puppet/puppet.conf \u0026lt;\u0026lt; \u0026#39;EOL\u0026#39; [main] certname = ${HOSTNAME} server = ${PUPPET_SERVER_HOSTNAME} [agent] server = ${PUPPET_SERVER_HOSTNAME} EOL EOF # Start and enable Puppet Agent service ssh -o BatchMode=yes ${USER}@${HOSTNAME} \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; sudo systemctl start puppet sudo systemctl enable puppet EOF # Trigger the certificate request from the agent ssh -o BatchMode=yes ${USER}@${HOSTNAME} \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; sudo /opt/puppetlabs/bin/puppet agent --test --waitforcert 60 EOF echo \u0026#34;Puppet Agent installation and configuration complete on ${HOSTNAME}.\u0026#34; Step 3: Approving Certificates on Puppet Master After installing the Puppet agent, we need to approve the certificates on the Puppet Master:\nsudo puppetserver ca list --all sudo puppetserver ca sign --certname \u0026lt;hostname\u0026gt; Step 4: Configuring docker Swarm Master configuration (master.pp)\nClick to expand class docker::swarm::master { $ip_address = $facts[\u0026#39;networking\u0026#39;][\u0026#39;interfaces\u0026#39;][\u0026#39;eth0\u0026#39;][\u0026#39;ip\u0026#39;] if $facts[\u0026#39;hostname\u0026#39;] == \u0026#39;ubuntu06\u0026#39; { exec { \u0026#39;initialize_swarm\u0026#39;: command =\u0026gt; \u0026#34;docker swarm init --advertise-addr ${ip_address}\u0026#34;, path =\u0026gt; [\u0026#39;/bin\u0026#39;, \u0026#39;/usr/bin\u0026#39;], unless =\u0026gt; \u0026#39;docker info | grep -i \u0026#34;Swarm: active\u0026#34;\u0026#39;, } exec { \u0026#39;generate_worker_token\u0026#39;: command =\u0026gt; \u0026#39;docker swarm join-token worker -q \u0026gt; /root/swarm_worker_token\u0026#39;, path =\u0026gt; [\u0026#39;/bin\u0026#39;, \u0026#39;/usr/bin\u0026#39;], require =\u0026gt; Exec[\u0026#39;initialize_swarm\u0026#39;], } exec { \u0026#39;generate_manager_token\u0026#39;: command =\u0026gt; \u0026#39;docker swarm join-token manager -q \u0026gt; /root/swarm_manager_token\u0026#39;, path =\u0026gt; [\u0026#39;/bin\u0026#39;, \u0026#39;/usr/bin\u0026#39;], require =\u0026gt; Exec[\u0026#39;initialize_swarm\u0026#39;], } exec { \u0026#39;copy_worker_token_to_fileserver\u0026#39;: command =\u0026gt; \u0026#39;scp /root/swarm_worker_token root@192.168.0.10:/etc/puppetlabs/code/environments/production/modules/docker/files/\u0026#39;, path =\u0026gt; [\u0026#39;/bin\u0026#39;, \u0026#39;/usr/bin\u0026#39;], require =\u0026gt; Exec[\u0026#39;generate_worker_token\u0026#39;], } exec { \u0026#39;copy_manager_token_to_fileserver\u0026#39;: command =\u0026gt; \u0026#39;scp /root/swarm_manager_token root@192.168.0.10:/etc/puppetlabs/code/environments/production/modules/docker/files/\u0026#39;, path =\u0026gt; [\u0026#39;/bin\u0026#39;, \u0026#39;/usr/bin\u0026#39;], require =\u0026gt; Exec[\u0026#39;generate_manager_token\u0026#39;], } } else { file { \u0026#39;/root/swarm_manager_token\u0026#39;: ensure =\u0026gt; present, source =\u0026gt; \u0026#39;puppet:///modules/docker/swarm_manager_token\u0026#39;, } exec { \u0026#39;join_swarm_as_manager\u0026#39;: command =\u0026gt; \u0026#34;docker swarm join --token $(cat /root/swarm_manager_token) 192.168.0.6:2377\u0026#34;, path =\u0026gt; [\u0026#39;/bin\u0026#39;, \u0026#39;/usr/bin\u0026#39;], unless =\u0026gt; \u0026#39;docker info | grep -i \u0026#34;Swarm: active\u0026#34;\u0026#39;, } } } Worker node configuration\nClick to expand class docker::swarm::worker { file { \u0026#39;/root/swarm_worker_token\u0026#39;: ensure =\u0026gt; present, source =\u0026gt; \u0026#39;puppet:///modules/docker/swarm_worker_token\u0026#39;, } exec { \u0026#39;join_swarm_as_worker\u0026#39;: command =\u0026gt; \u0026#34;docker swarm join --token $(cat /root/swarm_worker_token) 192.168.0.6:2377\u0026#34;, path =\u0026gt; [\u0026#39;/bin\u0026#39;, \u0026#39;/usr/bin\u0026#39;], unless =\u0026gt; \u0026#39;docker info | grep -i \u0026#34;Swarm: active\u0026#34;\u0026#39;, } } Now that we set up the Puppet environment, lets proceed with necessary modules installation\nProceed with the rest of the blog post \u0026hellip; TBD Applying the configuration for worker/master nodes ","date":"July 5, 2024","image":"https://ecociel.swiss/images/tech/micro_cloud_banner_huebbfad1edfa8e198fe68a27ac6a615ca_197742_650x0_resize_q90_lanczos.jpg","permalink":"/blog/2024-07-05-wasm-micro-cloud/","title":"Building a WebAssembly Micro Cloud with Puppet and Docker Swarm"},{"categories":null,"contents":"This blog post describes my attempt to build a library and toolbox that makes it easier to assemble bootable images for various devices. After several investigations into the topic in general, I found that I research the same thing over and over again just because I do not note down the nitty gritty details each time I figure them out.\nSo, let\u0026rsquo;s dive right in\u0026hellip;\nEmpty image with minimal MBR Let\u0026rsquo;s use dd and parted to created an empty image of 1KiB size and a minimal MBR:\ndd if=/dev/zero of=test.img bs=1k count=1 /sbin/parted test.img --script -- mklabel msdos dd if=/dev/zero of=test.img bs=446 count=1 conv=notrunc Note that parted writes a default boot loader when using msdos label, so we zero out the 446 bytes\nboot loader section bytes out for clarity.\nNow we can use xxd to see what we got:\nxxd -a test.img 00000000: 0000 0000 0000 0000 0000 0000 0000 0000 ................ * 000001f0: 0000 0000 0000 0000 0000 0000 0000 55aa ..............U. 00000200: 0000 0000 0000 0000 0000 0000 0000 0000 ................ * 000003f0: 0000 0000 0000 0000 0000 0000 0000 0000 ................ The bytes sequence \u0026lsquo;55aa\u0026rsquo; at position 01fe indicates the disk label type \u0026lsquo;msdos\u0026rsquo;. If you make an image\nlarger than 2 TB you\u0026rsquo;d need to use the label type \u0026lsquo;gpt\u0026rsquo;, but other than that \u0026lsquo;msdos\u0026rsquo; is the way to go.\nA note on od if you prefer that over xxd: The default endianness of od is little and also it\nuses different defaults for address and value printing. The equivalent command to xxd would be\nod --endian=big -A x -x test.img 000000 0000 0000 0000 0000 0000 0000 0000 0000 * 0001f0 0000 0000 0000 0000 0000 0000 0000 55aa 000200 0000 0000 0000 0000 0000 0000 0000 0000 * 000250 0000 0000 0000 0000 000258 Table Of Contents Empty image with minimal MBR Heading 2 Heading 3 Heading 4 Heading 5 Emphasis Link Paragraph Ordered List Unordered List Code and Syntax Highlighting Blockquote Inline HTML Tables Image Youtube video Here is example of hedings. You can use this heading by following markdownify rules. For example: use # for heading 1 and use ###### for heading 6.\nHeading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link I\u0026rsquo;m an inline-style link with title I\u0026rsquo;m a reference-style link I\u0026rsquo;m a relative reference to a repository file You can use numbers for reference-style link definitions Or leave it empty and use the link text itself .\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or http://www.example.com and sometimes\nexample.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nOrdered List List item List item List item List item List item Unordered List List item List item List item List item List item Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s Blockquote This is a blockquote example.\nInline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nDefinition list Is something people use sometimes. Markdown in HTML Does *not* work **very** well. Use HTML tags. Note\nThis is a simple note\nTip\nThis is a simple note\nInfo\nThis is a simple note\nWarning\nThis is a simple note\nTables Colons can be used to align columns.\nTables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 There must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don\u0026rsquo;t need to make the\nraw Markdown line up prettily. You can also use inline Markdown.\nMarkdown Less Pretty Still renders nicely 1 2 3 Image https://ecociel.swiss/images/blog/post-6.jpg does not exist\rYoutube video ","date":"March 22, 2024","image":"https://ecociel.swiss/images/tech/micro_cloud_banner_huebbfad1edfa8e198fe68a27ac6a615ca_197742_650x0_resize_q90_lanczos.jpg","permalink":"/blog/template/","title":"Low level fun"},{"categories":null,"contents":"This blog post describes my attempt to build a library and toolbox that makes it easier to assemble bootable images for various devices. After several investigations into the topic in general, I found that I research the same thing over and over again just because I do not note down the nitty gritty details each time I figure them out.\nSo, let\u0026rsquo;s dive right in\u0026hellip;\nTable Of Contents Empty image with minimal MBR Empty image with a single partition for booting References Empty image with minimal MBR Let\u0026rsquo;s use dd and parted to created an empty image of 1KiB size and a minimal MBR:\ndd if=/dev/zero of=test.img bs=1k count=1 /sbin/parted test.img --script -- mklabel msdos dd if=/dev/zero of=test.img bs=446 count=1 conv=notrunc Note that parted writes a default boot loader when using msdos label, so we zero out the 446 bytes\nboot loader section bytes out for clarity.\nNow we can use xxd to see what we got:\nxxd -a test.img 00000000: 0000 0000 0000 0000 0000 0000 0000 0000 ................ * 000001f0: 0000 0000 0000 0000 0000 0000 0000 55aa ..............U. 00000200: 0000 0000 0000 0000 0000 0000 0000 0000 ................ * 000003f0: 0000 0000 0000 0000 0000 0000 0000 0000 ................ The bytes sequence \u0026lsquo;55aa\u0026rsquo; at position 01fe indicates the disk label type \u0026lsquo;msdos\u0026rsquo;. If you make an image\nlarger than 2 TB you\u0026rsquo;d need to use the label type \u0026lsquo;gpt\u0026rsquo;, but other than that \u0026lsquo;msdos\u0026rsquo; is the way to go.\nA note on od if you prefer that over xxd: The default endianness of od is little and also it\nuses different defaults for address and value printing. The equivalent command to xxd would be\nod --endian=big -A x -x test.img 000000 0000 0000 0000 0000 0000 0000 0000 0000 * 0001f0 0000 0000 0000 0000 0000 0000 0000 55aa 000200 0000 0000 0000 0000 0000 0000 0000 0000 * 000250 0000 0000 0000 0000 000258 Empty image with a single partition for booting Next, let\u0026rsquo;s make an image that has a single partition that is also a boot partition.\nReferences Why does GNU parted write data to the first 440 bytes of the MBR? Suggestion to zero-out unwanted boot loader Master boot record Wikipedia parted project page parted manual for mklabel command Source files of parted label implementations ","date":"March 22, 2024","image":"https://ecociel.swiss/images/tech/micro_cloud_banner_huebbfad1edfa8e198fe68a27ac6a615ca_197742_650x0_resize_q90_lanczos.jpg","permalink":"/blog/post-1/","title":"The basics of creating disk images"},{"categories":null,"contents":"","date":"April 15, 2023","image":"https://ecociel.swiss/images/tech/micro_cloud_banner_huebbfad1edfa8e198fe68a27ac6a615ca_197742_650x0_resize_q90_lanczos.jpg","permalink":"/products/icp/","title":"Ingestion Control Platform"},{"categories":null,"contents":"","date":"July 14, 2021","image":"https://ecociel.swiss/images/tech/micro_cloud_banner_huebbfad1edfa8e198fe68a27ac6a615ca_197742_650x0_resize_q90_lanczos.jpg","permalink":"/services/alignment/","title":"Business-IT Alignment"},{"categories":null,"contents":"","date":"July 14, 2021","image":"https://ecociel.swiss/images/tech/micro_cloud_banner_huebbfad1edfa8e198fe68a27ac6a615ca_197742_650x0_resize_q90_lanczos.jpg","permalink":"/services/edge-iot/","title":"Edge and IOT"},{"categories":null,"contents":"","date":"July 14, 2021","image":"https://ecociel.swiss/images/tech/micro_cloud_banner_huebbfad1edfa8e198fe68a27ac6a615ca_197742_650x0_resize_q90_lanczos.jpg","permalink":"/products/nio/","title":"Nio - Access Control Made Easy"},{"categories":null,"contents":"","date":"July 13, 2021","image":"https://ecociel.swiss/images/tech/micro_cloud_banner_huebbfad1edfa8e198fe68a27ac6a615ca_197742_650x0_resize_q90_lanczos.jpg","permalink":"/services/applications/","title":"Application Development"},{"categories":null,"contents":"","date":"July 12, 2021","image":"https://ecociel.swiss/images/tech/micro_cloud_banner_huebbfad1edfa8e198fe68a27ac6a615ca_197742_650x0_resize_q90_lanczos.jpg","permalink":"/services/platforms/","title":"Platform Engineering"},{"categories":null,"contents":"","date":"July 11, 2021","image":"https://ecociel.swiss/images/tech/micro_cloud_banner_huebbfad1edfa8e198fe68a27ac6a615ca_197742_650x0_resize_q90_lanczos.jpg","permalink":"/services/sre/","title":"Site Reliability Engineering"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://ecociel.swiss/images/tech/micro_cloud_banner_huebbfad1edfa8e198fe68a27ac6a615ca_197742_650x0_resize_q90_lanczos.jpg","permalink":"/about/","title":"About Us"},{"categories":null,"contents":"écociel AG\nHandelsregisteramt des Kantons Nidwalden\nCHE-499.979.531\nVertretungsberechtigt: Jan Algermissen\nMühlebach 7\n6362 Stansstad\nSwitzerland\nEmail: contact@ecociel.ch ","date":"January 1, 1","image":"https://ecociel.swiss/images/tech/micro_cloud_banner_huebbfad1edfa8e198fe68a27ac6a615ca_197742_650x0_resize_q90_lanczos.jpg","permalink":"/contact/","title":"Contact Us"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://ecociel.swiss/images/tech/micro_cloud_banner_huebbfad1edfa8e198fe68a27ac6a615ca_197742_650x0_resize_q90_lanczos.jpg","permalink":"/get-in-touch/","title":"Get in Touch"},{"categories":null,"contents":"Data Protection Statement (Valid from 26 Jan 2024)\nThe protection of your personal data (“Data”) is of particular importance to us (hereinafter referred to as \u0026ldquo;écociel\u0026rdquo;, \u0026ldquo;we\u0026rdquo;). Therefore, we would like to inform you comprehensively about which data we collect from you and for what purpose.\nWhat are personal data?\nAll data that can be related to you personally, e.g. name, e-mail addresses, postal addresses, user behaviour.\nWhen You Contact Us When you contact us by e-mail or through the contact forms, the data you provide will be stored by us in order to process your inquiry or request. In doing so, we will at least receive your first and last name and your e-mail address.\nWe delete the data collected for the above-mentioned purpose after storage is no longer necessary or restrict processing if there are legal obligations to keep records.\nOur contact forms uses Formspree to send the form data to us through email. You can read more about the Fromspree Security .\nWe will not share any of the personal data with third parties.\nUse of Cookies and Google Analytics We use the Google Analytics service for statistical evaluation of the use of our Web site. The following terms from Google apply:\nGoogle Dublin, Google Ireland Ltd, Gordon House, Barrow Street, Dublin 4, Ireland, Fax: +353 (1) 436 1001.\nUser conditions:\nhttp://www.google.com/analytics/terms/de.html ,\nData protection:\nhttp://www.google.com/intl/de/analytics/learn/privacy.html ,\nPrivacy policy:\nhttp://www.google.de/intl/de/policies/privacy Besides Google Analytics, this Web site does not use cookies.\nYou can set your browser to inform you about the setting of cookies and to allow cookies only in individual cases, to exclude\nthe acceptance of cookies for certain cases or in general, and to activate the automatic deletion of cookies when closing the\nbrowser. If you deactivate cookies, the functionality of this website may be limited.\nYou can learn more about cookies for example at allaboutcookies.org .\n","date":"January 1, 1","image":"https://ecociel.swiss/images/tech/micro_cloud_banner_huebbfad1edfa8e198fe68a27ac6a615ca_197742_650x0_resize_q90_lanczos.jpg","permalink":"/privacy-policy/","title":"Privacy Policy"}]